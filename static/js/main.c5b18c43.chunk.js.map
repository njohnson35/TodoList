{"version":3,"sources":["components/TodoForm.js","components/Todo.js","components/TodoList.js","App.js","reportWebVitals.js","index.js"],"names":["TodoForm","_ref","addTodo","_useState","useState","id","task","completed","_useState2","Object","slicedToArray","todo","setTodo","react_default","a","createElement","className","onSubmit","e","preventDefault","trim","objectSpread","uuidv4","TextField","label","name","type","value","onChange","target","Button","Todo","toggleComplete","removeTodo","ListItem","style","display","Checkbox","checked","onClick","Typography","variant","textDecoration","IconButton","Close","TodoList","todos","List","map","components_Todo","key","LOCAL_STORAGE_KEY","App","setTodos","useEffect","storageTodos","JSON","parse","localStorage","getItem","setItem","stringify","padding","components_TodoForm","concat","toConsumableArray","components_TodoList","filter","reportWebVitals","onPerfEntry","Function","__webpack_require__","then","bind","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.c5b18c43.chunk.js","sourcesContent":["import { Button, TextField } from \"@mui/material\"\r\nimport React, { useState } from \"react\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\n\r\nfunction TodoForm({ addTodo }) {\r\n    const [todo, setTodo] = useState({\r\n        id: \"\",\r\n        task: \"\",\r\n        completed: false \r\n    });\r\n\r\n    function handleTaskInputChange(e) {\r\n        setTodo({ ...todo, task: e.target.value });\r\n    }\r\n\r\n    function handleSubmit(e) {\r\n        e.preventDefault();\r\n        if (todo.task.trim()) {\r\n            addTodo({ ...todo, id: uuidv4() });\r\n\r\n            setTodo({ ...todo, task: \"\" });\r\n        }\r\n    }\r\nreturn(\r\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\r\n        <TextField  \r\n        label=\"Task\"\r\n        name=\"task\"\r\n        type=\"text\"\r\n        value={todo.task}\r\n        onChange={handleTaskInputChange}\r\n        />\r\n        <Button type=\"submit\">submit</Button>\r\n    </form>\r\n);\r\n\r\n}\r\n\r\nexport default TodoForm;","import { Checkbox, IconButton, ListItem, Typography } from \"@mui/material\";\r\nimport { Close } from \"@mui/icons-material\";\r\nimport React from \"react\";\r\n\r\nfunction Todo({ todo, toggleComplete, removeTodo }) {\r\n    function handleCheckboxClick() {\r\n        toggleComplete(todo.id);\r\n    }\r\n\r\n    function handleRemoveClick() {\r\n        removeTodo(todo.id);\r\n    }\r\n    \r\n    return (\r\n        <ListItem style={{ display: \"flex\" }}>\r\n        <Checkbox\r\n        checked={todo.completed} \r\n         onClick={handleCheckboxClick}\r\n          />\r\n        <Typography\r\n        variant=\"body1\"\r\n        style={{\r\n            textDecoration: todo.completed ? \"line-through\" : null\r\n        }}\r\n        >\r\n          {todo.task}\r\n          </Typography>\r\n        <IconButton onClick={handleRemoveClick}>\r\n            <Close />\r\n            </IconButton>\r\n        </ListItem>\r\n    );\r\n}\r\n\r\nexport default Todo; ","import { List } from \"@mui/material\";\r\nimport React from \"react\";\r\nimport Todo from \"./Todo\";\r\n\r\nfunction TodoList({ todos, toggleComplete, removeTodo }) {\r\nreturn(\r\n    <List>\r\n        {todos.map(todo => (\r\n            <Todo \r\n            key={todo.id} \r\n            todo={todo} \r\n            toggleComplete={toggleComplete}\r\n            removeTodo={removeTodo}\r\n             />\r\n        ))}\r\n    </List>\r\n);\r\n\r\n}\r\n\r\nexport default TodoList;","import { Typography } from '@mui/material';\nimport React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport TodoForm from \"./components/TodoForm\";\nimport TodoList from \"./components/TodoList\";\n\n\nconst LOCAL_STORAGE_KEY = \"react-todo-list-todos\";\n\nfunction App() {\n  const [todos, setTodos] = useState([]);\n\n  useEffect(() => {\n    const storageTodos = JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY));\n    if (storageTodos) {\n      setTodos(storageTodos); \n    \n      }\n  }, []);\n  \n  useEffect(() => {\n    localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(todos));\n  }, [todos]);\n\n  function addTodo(todo) {\n    setTodos([todo, ...todos]);\n  }\n\n  function toggleComplete(id) {\n    setTodos(\n      todos.map(todo => {\n        if (todo.id === id) {\n          return {\n            ...todo,\n            completed: !todo.completed\n          };\n        }\n        return todo;\n      })\n    );\n  }\n  \n  function removeTodo(id){\n    setTodos(todos.filter(todo => todo.id !== id));\n  }\n  \n  return (\n    <div className=\"App\">      \n<Typography style={{ padding:16 }} variant=\"h1\">\n  Stop Being Lazy\n  </Typography>\n<TodoForm addTodo={addTodo} />\n<TodoList \ntodos={todos} \ntoggleComplete={toggleComplete}\nremoveTodo={removeTodo} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}